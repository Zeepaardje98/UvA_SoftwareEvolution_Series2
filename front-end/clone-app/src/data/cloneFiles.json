[
 {
  "fileName": "/src/smallsql/database/IndexDescription.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/IndexDescription.java",
    "endLineNumber": 194,
    "content": "catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }",
    "cloneClass": "cb59bb92f73d6df582b4d07a896e3f47",
    "startLineNumber": 186
   }
  ],
  "id": 0,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/SQLParser.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/SQLParser.java",
    "endLineNumber": 1937,
    "content": "try{\r\n            int maxRows = Integer.parseInt(token.getName(sql));\r\n            selCmd.setMaxRows(maxRows);\r\n        }catch(NumberFormatException e){\r\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n        }",
    "cloneClass": "295ac37eed3b8f081b7f824619f98ea0",
    "startLineNumber": 1932
   },
   {
    "fileName": "/src/smallsql/database/SQLParser.java",
    "endLineNumber": 357,
    "content": "try{\r\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\r\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\r\n\t\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n\t\t\t\t\t}",
    "cloneClass": "295ac37eed3b8f081b7f824619f98ea0",
    "startLineNumber": 352
   }
  ],
  "id": 1,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/database/IndexDescriptions.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/IndexDescriptions.java",
    "endLineNumber": 67,
    "content": "{\r\n\t\t// SAVER: use SmallSQLException\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}",
    "cloneClass": "8788540bda5bd1b61d0e5095dba5328b",
    "startLineNumber": 62
   }
  ],
  "id": 2,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/ForeignKeys.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/ForeignKeys.java",
    "endLineNumber": 60,
    "content": "{\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}",
    "cloneClass": "8788540bda5bd1b61d0e5095dba5328b",
    "startLineNumber": 56
   }
  ],
  "id": 3,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/junit/BasicTestCase.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/BasicTestCase.java",
    "endLineNumber": 196,
    "content": "/**\r\n     * Identical to the Implementation from Utils.string2boolean\r\n     */\r\n    private boolean string2boolean( String val){\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }",
    "cloneClass": "0fdad427454e254245684a09fc86159f",
    "startLineNumber": 188
   },
   {
    "fileName": "/src/smallsql/junit/BasicTestCase.java",
    "endLineNumber": 109,
    "content": "private static String bytes2hex( byte[] bytes ){\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}",
    "cloneClass": "475450316e41a49bb6b31277c215cac3",
    "startLineNumber": 102
   }
  ],
  "id": 4,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/database/LongTreeList.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/LongTreeList.java",
    "endLineNumber": 341,
    "content": "//there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;",
    "cloneClass": "d220bd86e8bd42b50cf304b58dae9a51",
    "startLineNumber": 331
   },
   {
    "fileName": "/src/smallsql/database/LongTreeList.java",
    "endLineNumber": 386,
    "content": "// there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;",
    "cloneClass": "d220bd86e8bd42b50cf304b58dae9a51",
    "startLineNumber": 376
   }
  ],
  "id": 5,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/TestFunctions.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestFunctions.java",
    "endLineNumber": 383,
    "content": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }",
    "cloneClass": "c1df2b1f4299878af94dfdc9e4bc67ce",
    "startLineNumber": 374
   }
  ],
  "id": 6,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/ExpressionFunctionRound.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/ExpressionFunctionRound.java",
    "endLineNumber": 60,
    "content": "if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}",
    "cloneClass": "560f44261aa7aa34a63807411184d134",
    "startLineNumber": 50
   }
  ],
  "id": 7,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/Columns.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/Columns.java",
    "endLineNumber": 62,
    "content": "{\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}",
    "cloneClass": "8788540bda5bd1b61d0e5095dba5328b",
    "startLineNumber": 58
   }
  ],
  "id": 8,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/SSCallableStatement.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/SSCallableStatement.java",
    "endLineNumber": 143,
    "content": "{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }",
    "cloneClass": "f022ac3067af3e6ece8757b12c6d882e",
    "startLineNumber": 135
   },
   {
    "fileName": "/src/smallsql/database/SSCallableStatement.java",
    "endLineNumber": 125,
    "content": "{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }",
    "cloneClass": "f022ac3067af3e6ece8757b12c6d882e",
    "startLineNumber": 117
   }
  ],
  "id": 9,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/TestOperatoren.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 104,
    "content": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }",
    "cloneClass": "c1df2b1f4299878af94dfdc9e4bc67ce",
    "startLineNumber": 95
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 141,
    "content": "pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();",
    "cloneClass": "002aa178595a3531f1e944d231fe3b30",
    "startLineNumber": 115
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 218,
    "content": "pr.setObject( 1, testValue.small);\r\n        pr.setObject( 2, testValue.large);\r\n        rs = pr.executeQuery();\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();",
    "cloneClass": "002aa178595a3531f1e944d231fe3b30",
    "startLineNumber": 209
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 227,
    "content": "pr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();",
    "cloneClass": "002aa178595a3531f1e944d231fe3b30",
    "startLineNumber": 221
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 239,
    "content": "pr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();",
    "cloneClass": "002aa178595a3531f1e944d231fe3b30",
    "startLineNumber": 230
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 248,
    "content": "pr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();",
    "cloneClass": "002aa178595a3531f1e944d231fe3b30",
    "startLineNumber": 242
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "endLineNumber": 273,
    "content": "private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }",
    "cloneClass": "7d5bed0854b9a9c7f240aaeefe87d07b",
    "startLineNumber": 267
   }
  ],
  "id": 10,
  "numClones": 7
 },
 {
  "fileName": "/src/smallsql/junit/TestDataTypes.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestDataTypes.java",
    "endLineNumber": 77,
    "content": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }",
    "cloneClass": "c1df2b1f4299878af94dfdc9e4bc67ce",
    "startLineNumber": 68
   }
  ],
  "id": 11,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/MutableNumeric.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/MutableNumeric.java",
    "endLineNumber": 240,
    "content": "if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}",
    "cloneClass": "264a46050a348041b44cdbe144980569",
    "startLineNumber": 235
   },
   {
    "fileName": "/src/smallsql/database/MutableNumeric.java",
    "endLineNumber": 172,
    "content": "if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}",
    "cloneClass": "264a46050a348041b44cdbe144980569",
    "startLineNumber": 167
   }
  ],
  "id": 12,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/database/TableView.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/TableView.java",
    "endLineNumber": 113,
    "content": "catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}",
    "cloneClass": "cb59bb92f73d6df582b4d07a896e3f47",
    "startLineNumber": 105
   }
  ],
  "id": 13,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/Utils.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/Utils.java",
    "endLineNumber": 322,
    "content": "static boolean string2boolean( String val){\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }",
    "cloneClass": "0fdad427454e254245684a09fc86159f",
    "startLineNumber": 317
   },
   {
    "fileName": "/src/smallsql/database/Utils.java",
    "endLineNumber": 212,
    "content": "static String bytes2hex( byte[] bytes ){\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }",
    "cloneClass": "475450316e41a49bb6b31277c215cac3",
    "startLineNumber": 205
   }
  ],
  "id": 14,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/database/IndexScrollStatus.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/IndexScrollStatus.java",
    "endLineNumber": 131,
    "content": "if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node",
    "cloneClass": "36b607a483380cd3d1706b52ae3551a8",
    "startLineNumber": 120
   },
   {
    "fileName": "/src/smallsql/database/IndexScrollStatus.java",
    "endLineNumber": 99,
    "content": "if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}",
    "cloneClass": "36b607a483380cd3d1706b52ae3551a8",
    "startLineNumber": 89
   }
  ],
  "id": 15,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/TestScrollable.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "endLineNumber": 178,
    "content": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }",
    "cloneClass": "942e72e7251b8d62d53c0e3a36bdd6e3",
    "startLineNumber": 173
   },
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "endLineNumber": 140,
    "content": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }",
    "cloneClass": "942e72e7251b8d62d53c0e3a36bdd6e3",
    "startLineNumber": 135
   },
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "endLineNumber": 104,
    "content": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException( \"01000\", 0, ex);\r\n        }",
    "cloneClass": "942e72e7251b8d62d53c0e3a36bdd6e3",
    "startLineNumber": 99
   },
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "endLineNumber": 72,
    "content": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException( \"01000\", 0, ex );\r\n        }",
    "cloneClass": "942e72e7251b8d62d53c0e3a36bdd6e3",
    "startLineNumber": 67
   }
  ],
  "id": 16,
  "numClones": 4
 },
 {
  "fileName": "/src/smallsql/junit/TestJoins.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestJoins.java",
    "endLineNumber": 155,
    "content": "pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();",
    "cloneClass": "002aa178595a3531f1e944d231fe3b30",
    "startLineNumber": 129
   },
   {
    "fileName": "/src/smallsql/junit/TestJoins.java",
    "endLineNumber": 210,
    "content": "private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }",
    "cloneClass": "7d5bed0854b9a9c7f240aaeefe87d07b",
    "startLineNumber": 204
   }
  ],
  "id": 17,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/database/Table.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/Table.java",
    "endLineNumber": 394,
    "content": "if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }",
    "cloneClass": "a261e9a2d7fe162236cb1d718f0fafc6",
    "startLineNumber": 388
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "endLineNumber": 376,
    "content": "if(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}",
    "cloneClass": "a261e9a2d7fe162236cb1d718f0fafc6",
    "startLineNumber": 370
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "endLineNumber": 394,
    "content": "{\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }",
    "cloneClass": "6809618a3f3b475755d2b879f28d0522",
    "startLineNumber": 388
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "endLineNumber": 376,
    "content": "{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}",
    "cloneClass": "6809618a3f3b475755d2b879f28d0522",
    "startLineNumber": 370
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "endLineNumber": 364,
    "content": "{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}",
    "cloneClass": "6809618a3f3b475755d2b879f28d0522",
    "startLineNumber": 358
   }
  ],
  "id": 18,
  "numClones": 5
 },
 {
  "fileName": "/src/smallsql/junit/TestResultSet.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestResultSet.java",
    "endLineNumber": 107,
    "content": "assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );",
    "cloneClass": "f8c7c867984090c641ffd4ed6e90f72b",
    "startLineNumber": 85
   },
   {
    "fileName": "/src/smallsql/junit/TestResultSet.java",
    "endLineNumber": 150,
    "content": "assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );",
    "cloneClass": "f8c7c867984090c641ffd4ed6e90f72b",
    "startLineNumber": 128
   }
  ],
  "id": 19,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/TestOrderBy.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 725,
    "content": "//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );",
    "cloneClass": "baca03d34e2fdd65eb752cc18a924958",
    "startLineNumber": 707
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 756,
    "content": "//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );",
    "cloneClass": "baca03d34e2fdd65eb752cc18a924958",
    "startLineNumber": 738
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 192,
    "content": "while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}",
    "cloneClass": "c71ecf1640f9f4585a56d64af29ce980",
    "startLineNumber": 187
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 816,
    "content": "while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}",
    "cloneClass": "c71ecf1640f9f4585a56d64af29ce980",
    "startLineNumber": 811
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 351,
    "content": "assertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );",
    "cloneClass": "b56abf4facba68c07d8c4714bd46c9fe",
    "startLineNumber": 338
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 250,
    "content": "assertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );",
    "cloneClass": "b56abf4facba68c07d8c4714bd46c9fe",
    "startLineNumber": 235
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 436,
    "content": "assertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );",
    "cloneClass": "b56abf4facba68c07d8c4714bd46c9fe",
    "startLineNumber": 423
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "endLineNumber": 222,
    "content": "assertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );",
    "cloneClass": "b56abf4facba68c07d8c4714bd46c9fe",
    "startLineNumber": 207
   }
  ],
  "id": 20,
  "numClones": 8
 },
 {
  "fileName": "/src/smallsql/database/ExpressionFunctionTruncate.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/ExpressionFunctionTruncate.java",
    "endLineNumber": 60,
    "content": "if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}",
    "cloneClass": "560f44261aa7aa34a63807411184d134",
    "startLineNumber": 50
   }
  ],
  "id": 21,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/Column.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/Column.java",
    "endLineNumber": 154,
    "content": "{\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\treturn scale;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Expression.getScale(dataType);\r\n\t\t}\r\n    }",
    "cloneClass": "5abd4d6ad90c2b30eaa4de247aa39cbe",
    "startLineNumber": 146
   },
   {
    "fileName": "/src/smallsql/database/Column.java",
    "endLineNumber": 144,
    "content": "{\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\treturn scale;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Expression.getScale(dataType);\r\n\t\t}\r\n    }",
    "cloneClass": "5abd4d6ad90c2b30eaa4de247aa39cbe",
    "startLineNumber": 136
   }
  ],
  "id": 22,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/database/Strings.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/Strings.java",
    "endLineNumber": 60,
    "content": "{\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}",
    "cloneClass": "8788540bda5bd1b61d0e5095dba5328b",
    "startLineNumber": 56
   }
  ],
  "id": 23,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/junit/TestLanguage.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestLanguage.java",
    "endLineNumber": 89,
    "content": "{\r\n\t\t\trecreateTestTab(stat);\r\n\t\t\t\r\n\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\t\t\tfail();\r\n\t\t}",
    "cloneClass": "967bd22162c75bd08562a92fac9d24ac",
    "startLineNumber": 84
   },
   {
    "fileName": "/src/smallsql/junit/TestLanguage.java",
    "endLineNumber": 109,
    "content": "{\r\n\t\t\t\trecreateTestTab(stat);\r\n\t\r\n\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\t\t\t\tfail();\r\n\t\t\t}",
    "cloneClass": "967bd22162c75bd08562a92fac9d24ac",
    "startLineNumber": 104
   }
  ],
  "id": 24,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/TestAlterTable2.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestAlterTable2.java",
    "endLineNumber": 26,
    "content": "public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }",
    "cloneClass": "b2e10f0696b39e3482b6a008a5f5893e",
    "startLineNumber": 20
   }
  ],
  "id": 25,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/junit/TestAlterTable.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestAlterTable.java",
    "endLineNumber": 45,
    "content": "public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }",
    "cloneClass": "b2e10f0696b39e3482b6a008a5f5893e",
    "startLineNumber": 39
   }
  ],
  "id": 26,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/junit/TestTransactions.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 103,
    "content": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}",
    "cloneClass": "eb4781acda062484046ada97f4c36223",
    "startLineNumber": 98
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 193,
    "content": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}",
    "cloneClass": "eb4781acda062484046ada97f4c36223",
    "startLineNumber": 188
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 370,
    "content": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}",
    "cloneClass": "eb4781acda062484046ada97f4c36223",
    "startLineNumber": 365
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 286,
    "content": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}",
    "cloneClass": "eb4781acda062484046ada97f4c36223",
    "startLineNumber": 281
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 162,
    "content": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}",
    "cloneClass": "eb4781acda062484046ada97f4c36223",
    "startLineNumber": 157
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 134,
    "content": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}",
    "cloneClass": "eb4781acda062484046ada97f4c36223",
    "startLineNumber": 129
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 121,
    "content": "con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");",
    "cloneClass": "0b563bd0c7097f78b2d6c89e72127c24",
    "startLineNumber": 113
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 180,
    "content": "con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");",
    "cloneClass": "0b563bd0c7097f78b2d6c89e72127c24",
    "startLineNumber": 172
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 274,
    "content": "assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t\t\r\n            assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n            \r\n\t\t\tSavepoint savepoint = con.setSavepoint();\r\n\t\t\t\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");",
    "cloneClass": "fcd49758d88e6606084ba67cb6e0dba5",
    "startLineNumber": 262
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "endLineNumber": 317,
    "content": "assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));\r\n            assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            Savepoint savepoint = con.setSavepoint();\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));\r\n            assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");",
    "cloneClass": "fcd49758d88e6606084ba67cb6e0dba5",
    "startLineNumber": 305
   }
  ],
  "id": 27,
  "numClones": 10
 },
 {
  "fileName": "/src/smallsql/database/GroupResult.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/GroupResult.java",
    "endLineNumber": 116,
    "content": "{\r\n\t\t\tint idx = internalExpressions.indexOf(expr);\r\n\t\t\tif(idx >= 0) return idx;\r\n\t\t\tinternalExpressions.add(expr);\r\n\t\t\treturn internalExpressions.size()-1;\r\n\t\t}",
    "cloneClass": "7028e0110a43984557d3086634161ccd",
    "startLineNumber": 111
   },
   {
    "fileName": "/src/smallsql/database/GroupResult.java",
    "endLineNumber": 94,
    "content": "{\r\n\t\t\tint idx = internalExpressions.indexOf(expr);\r\n\t\t\tif(idx >= 0) return idx;\r\n\t\t\tinternalExpressions.add(expr);\r\n\t\t\treturn internalExpressions.size()-1;\r\n\t\t}",
    "cloneClass": "7028e0110a43984557d3086634161ccd",
    "startLineNumber": 89
   }
  ],
  "id": 28,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/TestMoneyRounding.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestMoneyRounding.java",
    "endLineNumber": 62,
    "content": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }",
    "cloneClass": "c1df2b1f4299878af94dfdc9e4bc67ce",
    "startLineNumber": 53
   }
  ],
  "id": 29,
  "numClones": 1
 },
 {
  "fileName": "/src/smallsql/database/ExpressionValue.java",
  "clones": [
   {
    "fileName": "/src/smallsql/database/ExpressionValue.java",
    "endLineNumber": 216,
    "content": "{\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}",
    "cloneClass": "204920fe880ecd17a29b998bd36ce3bf",
    "startLineNumber": 211
   },
   {
    "fileName": "/src/smallsql/database/ExpressionValue.java",
    "endLineNumber": 159,
    "content": "{\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}",
    "cloneClass": "204920fe880ecd17a29b998bd36ce3bf",
    "startLineNumber": 154
   }
  ],
  "id": 30,
  "numClones": 2
 },
 {
  "fileName": "/src/smallsql/junit/BenchTest.java",
  "clones": [
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 432,
    "content": "pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );",
    "cloneClass": "5db641b9500b4ed5d34c206e962d56c4",
    "startLineNumber": 415
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 486,
    "content": "pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );",
    "cloneClass": "5db641b9500b4ed5d34c206e962d56c4",
    "startLineNumber": 469
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 730,
    "content": "{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            st.close();\r\n        }",
    "cloneClass": "1d46c2cec1dcbd0c4aa7f0f39a9e7119",
    "startLineNumber": 726
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 297,
    "content": "{\r\n                // reset for the next test\r\n                Statement st = con.createStatement();\r\n                st.execute(\"DELETE FROM \" + tableName);\r\n                st.close();\r\n            }",
    "cloneClass": "1d46c2cec1dcbd0c4aa7f0f39a9e7119",
    "startLineNumber": 292
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 328,
    "content": "// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }",
    "cloneClass": "a70346e55042751021eb2416680a1424",
    "startLineNumber": 322
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 214,
    "content": "// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }",
    "cloneClass": "a70346e55042751021eb2416680a1424",
    "startLineNumber": 208
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 486,
    "content": "pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );",
    "cloneClass": "57c0832ae66aa8a8ea6944f1003c6af3",
    "startLineNumber": 476
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 433,
    "content": "pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );",
    "cloneClass": "57c0832ae66aa8a8ea6944f1003c6af3",
    "startLineNumber": 422
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 540,
    "content": "pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );",
    "cloneClass": "57c0832ae66aa8a8ea6944f1003c6af3",
    "startLineNumber": 530
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "endLineNumber": 541,
    "content": "pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );",
    "cloneClass": "57c0832ae66aa8a8ea6944f1003c6af3",
    "startLineNumber": 530
   }
  ],
  "id": 31,
  "numClones": 10
 }
]