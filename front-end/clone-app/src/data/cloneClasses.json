[
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 98,
    "lines": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 188,
    "lines": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 365,
    "lines": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 281,
    "lines": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 157,
    "lines": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 129,
    "lines": "{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}"
   }
  ],
  "title": "/src/smallsql/junit/TestTransactions.java, /src/smallsql/junit/TestTransactions.java & more ...",
  "id": 0,
  "numClones": 6,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/TableView.java",
    "startLineNumber": 105,
    "lines": "catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/database/IndexDescription.java",
    "startLineNumber": 186,
    "lines": "catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }"
   }
  ],
  "title": "/src/smallsql/database/TableView.java, /src/smallsql/database/IndexDescription.java",
  "id": 1,
  "numClones": 2,
  "cloneSize": 9
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestDataTypes.java",
    "startLineNumber": 68,
    "lines": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/TestFunctions.java",
    "startLineNumber": 374,
    "lines": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/TestMoneyRounding.java",
    "startLineNumber": 53,
    "lines": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 95,
    "lines": "public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"
   }
  ],
  "title": "/src/smallsql/junit/TestDataTypes.java, /src/smallsql/junit/TestFunctions.java & more ...",
  "id": 2,
  "numClones": 4,
  "cloneSize": 9
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestJoins.java",
    "startLineNumber": 129,
    "lines": "pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 115,
    "lines": "pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 209,
    "lines": "pr.setObject( 1, testValue.small);\r\n        pr.setObject( 2, testValue.large);\r\n        rs = pr.executeQuery();\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 221,
    "lines": "pr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 230,
    "lines": "pr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 242,
    "lines": "pr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();"
   }
  ],
  "title": "/src/smallsql/junit/TestJoins.java, /src/smallsql/junit/TestOperatoren.java & more ...",
  "id": 3,
  "numClones": 6,
  "cloneSize": 7
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/GroupResult.java",
    "startLineNumber": 111,
    "lines": "{\r\n\t\t\tint idx = internalExpressions.indexOf(expr);\r\n\t\t\tif(idx >= 0) return idx;\r\n\t\t\tinternalExpressions.add(expr);\r\n\t\t\treturn internalExpressions.size()-1;\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/database/GroupResult.java",
    "startLineNumber": 89,
    "lines": "{\r\n\t\t\tint idx = internalExpressions.indexOf(expr);\r\n\t\t\tif(idx >= 0) return idx;\r\n\t\t\tinternalExpressions.add(expr);\r\n\t\t\treturn internalExpressions.size()-1;\r\n\t\t}"
   }
  ],
  "title": "/src/smallsql/database/GroupResult.java, /src/smallsql/database/GroupResult.java",
  "id": 4,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/MutableNumeric.java",
    "startLineNumber": 235,
    "lines": "if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/database/MutableNumeric.java",
    "startLineNumber": 167,
    "lines": "if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}"
   }
  ],
  "title": "/src/smallsql/database/MutableNumeric.java, /src/smallsql/database/MutableNumeric.java",
  "id": 5,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 415,
    "lines": "pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );"
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 469,
    "lines": "pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );"
   }
  ],
  "title": "/src/smallsql/junit/BenchTest.java, /src/smallsql/junit/BenchTest.java",
  "id": 6,
  "numClones": 2,
  "cloneSize": 18
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/Table.java",
    "startLineNumber": 388,
    "lines": "if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }"
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "startLineNumber": 370,
    "lines": "if(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"
   }
  ],
  "title": "/src/smallsql/database/Table.java, /src/smallsql/database/Table.java",
  "id": 7,
  "numClones": 2,
  "cloneSize": 7
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 707,
    "lines": "//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );"
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 738,
    "lines": "//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );"
   }
  ],
  "title": "/src/smallsql/junit/TestOrderBy.java, /src/smallsql/junit/TestOrderBy.java",
  "id": 8,
  "numClones": 2,
  "cloneSize": 15
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 726,
    "lines": "{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            st.close();\r\n        }"
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 292,
    "lines": "{\r\n                // reset for the next test\r\n                Statement st = con.createStatement();\r\n                st.execute(\"DELETE FROM \" + tableName);\r\n                st.close();\r\n            }"
   }
  ],
  "title": "/src/smallsql/junit/BenchTest.java, /src/smallsql/junit/BenchTest.java",
  "id": 9,
  "numClones": 2,
  "cloneSize": 5
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 322,
    "lines": "// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }"
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 208,
    "lines": "// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }"
   }
  ],
  "title": "/src/smallsql/junit/BenchTest.java, /src/smallsql/junit/BenchTest.java",
  "id": 10,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 187,
    "lines": "while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 811,
    "lines": "while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"
   }
  ],
  "title": "/src/smallsql/junit/TestOrderBy.java, /src/smallsql/junit/TestOrderBy.java",
  "id": 11,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "startLineNumber": 173,
    "lines": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }"
   },
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "startLineNumber": 135,
    "lines": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }"
   },
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "startLineNumber": 99,
    "lines": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException( \"01000\", 0, ex);\r\n        }"
   },
   {
    "fileName": "/src/smallsql/junit/TestScrollable.java",
    "startLineNumber": 67,
    "lines": "try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException( \"01000\", 0, ex );\r\n        }"
   }
  ],
  "title": "/src/smallsql/junit/TestScrollable.java, /src/smallsql/junit/TestScrollable.java & more ...",
  "id": 12,
  "numClones": 4,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestJoins.java",
    "startLineNumber": 204,
    "lines": "private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/TestOperatoren.java",
    "startLineNumber": 267,
    "lines": "private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }"
   }
  ],
  "title": "/src/smallsql/junit/TestJoins.java, /src/smallsql/junit/TestOperatoren.java",
  "id": 13,
  "numClones": 2,
  "cloneSize": 7
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/Utils.java",
    "startLineNumber": 317,
    "lines": "static boolean string2boolean( String val){\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/BasicTestCase.java",
    "startLineNumber": 188,
    "lines": "/**\r\n     * Identical to the Implementation from Utils.string2boolean\r\n     */\r\n    private boolean string2boolean( String val){\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }"
   }
  ],
  "title": "/src/smallsql/database/Utils.java, /src/smallsql/junit/BasicTestCase.java",
  "id": 14,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 113,
    "lines": "con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 172,
    "lines": "con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");"
   }
  ],
  "title": "/src/smallsql/junit/TestTransactions.java, /src/smallsql/junit/TestTransactions.java",
  "id": 15,
  "numClones": 2,
  "cloneSize": 7
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/SQLParser.java",
    "startLineNumber": 1932,
    "lines": "try{\r\n            int maxRows = Integer.parseInt(token.getName(sql));\r\n            selCmd.setMaxRows(maxRows);\r\n        }catch(NumberFormatException e){\r\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n        }"
   },
   {
    "fileName": "/src/smallsql/database/SQLParser.java",
    "startLineNumber": 352,
    "lines": "try{\r\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\r\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\r\n\t\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n\t\t\t\t\t}"
   }
  ],
  "title": "/src/smallsql/database/SQLParser.java, /src/smallsql/database/SQLParser.java",
  "id": 16,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/ExpressionFunctionTruncate.java",
    "startLineNumber": 50,
    "lines": "if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/database/ExpressionFunctionRound.java",
    "startLineNumber": 50,
    "lines": "if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"
   }
  ],
  "title": "/src/smallsql/database/ExpressionFunctionTruncate.java, /src/smallsql/database/ExpressionFunctionRound.java",
  "id": 17,
  "numClones": 2,
  "cloneSize": 11
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/Utils.java",
    "startLineNumber": 205,
    "lines": "static String bytes2hex( byte[] bytes ){\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/BasicTestCase.java",
    "startLineNumber": 102,
    "lines": "private static String bytes2hex( byte[] bytes ){\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}"
   }
  ],
  "title": "/src/smallsql/database/Utils.java, /src/smallsql/junit/BasicTestCase.java",
  "id": 18,
  "numClones": 2,
  "cloneSize": 8
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestAlterTable.java",
    "startLineNumber": 39,
    "lines": "public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }"
   },
   {
    "fileName": "/src/smallsql/junit/TestAlterTable2.java",
    "startLineNumber": 20,
    "lines": "public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }"
   }
  ],
  "title": "/src/smallsql/junit/TestAlterTable.java, /src/smallsql/junit/TestAlterTable2.java",
  "id": 19,
  "numClones": 2,
  "cloneSize": 7
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/ExpressionValue.java",
    "startLineNumber": 211,
    "lines": "{\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}"
   },
   {
    "fileName": "/src/smallsql/database/ExpressionValue.java",
    "startLineNumber": 154,
    "lines": "{\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}"
   }
  ],
  "title": "/src/smallsql/database/ExpressionValue.java, /src/smallsql/database/ExpressionValue.java",
  "id": 20,
  "numClones": 2,
  "cloneSize": 6
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestLanguage.java",
    "startLineNumber": 84,
    "lines": "{\r\n\t\t\trecreateTestTab(stat);\r\n\t\t\t\r\n\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\t\t\tfail();\r\n\t\t}"
   },
   {
    "fileName": "/src/smallsql/junit/TestLanguage.java",
    "startLineNumber": 104,
    "lines": "{\r\n\t\t\t\trecreateTestTab(stat);\r\n\t\r\n\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\t\t\t\tfail();\r\n\t\t\t}"
   }
  ],
  "title": "/src/smallsql/junit/TestLanguage.java, /src/smallsql/junit/TestLanguage.java",
  "id": 21,
  "numClones": 2,
  "cloneSize": 5
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/SSCallableStatement.java",
    "startLineNumber": 135,
    "lines": "{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"
   },
   {
    "fileName": "/src/smallsql/database/SSCallableStatement.java",
    "startLineNumber": 117,
    "lines": "{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"
   }
  ],
  "title": "/src/smallsql/database/SSCallableStatement.java, /src/smallsql/database/SSCallableStatement.java",
  "id": 22,
  "numClones": 2,
  "cloneSize": 9
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestResultSet.java",
    "startLineNumber": 85,
    "lines": "assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );"
   },
   {
    "fileName": "/src/smallsql/junit/TestResultSet.java",
    "startLineNumber": 128,
    "lines": "assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );"
   }
  ],
  "title": "/src/smallsql/junit/TestResultSet.java, /src/smallsql/junit/TestResultSet.java",
  "id": 23,
  "numClones": 2,
  "cloneSize": 19
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 476,
    "lines": "pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );"
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 422,
    "lines": "pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );"
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 530,
    "lines": "pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );"
   },
   {
    "fileName": "/src/smallsql/junit/BenchTest.java",
    "startLineNumber": 530,
    "lines": "pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );"
   }
  ],
  "title": "/src/smallsql/junit/BenchTest.java, /src/smallsql/junit/BenchTest.java & more ...",
  "id": 24,
  "numClones": 4,
  "cloneSize": 12
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/Columns.java",
    "startLineNumber": 58,
    "lines": "{\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}"
   },
   {
    "fileName": "/src/smallsql/database/ForeignKeys.java",
    "startLineNumber": 56,
    "lines": "{\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}"
   },
   {
    "fileName": "/src/smallsql/database/Strings.java",
    "startLineNumber": 56,
    "lines": "{\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}"
   },
   {
    "fileName": "/src/smallsql/database/IndexDescriptions.java",
    "startLineNumber": 62,
    "lines": "{\r\n\t\t// SAVER: use SmallSQLException\r\n\t\tif (idx >= size)\r\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\r\n\t\treturn data[idx];\r\n\t}"
   }
  ],
  "title": "/src/smallsql/database/Columns.java, /src/smallsql/database/ForeignKeys.java & more ...",
  "id": 25,
  "numClones": 4,
  "cloneSize": 5
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/Column.java",
    "startLineNumber": 146,
    "lines": "{\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\treturn scale;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Expression.getScale(dataType);\r\n\t\t}\r\n    }"
   },
   {
    "fileName": "/src/smallsql/database/Column.java",
    "startLineNumber": 136,
    "lines": "{\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\treturn scale;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Expression.getScale(dataType);\r\n\t\t}\r\n    }"
   }
  ],
  "title": "/src/smallsql/database/Column.java, /src/smallsql/database/Column.java",
  "id": 26,
  "numClones": 2,
  "cloneSize": 9
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/Table.java",
    "startLineNumber": 388,
    "lines": "{\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }"
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "startLineNumber": 370,
    "lines": "{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"
   },
   {
    "fileName": "/src/smallsql/database/Table.java",
    "startLineNumber": 358,
    "lines": "{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"
   }
  ],
  "title": "/src/smallsql/database/Table.java, /src/smallsql/database/Table.java & more ...",
  "id": 27,
  "numClones": 3,
  "cloneSize": 7
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/IndexScrollStatus.java",
    "startLineNumber": 120,
    "lines": "if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node"
   },
   {
    "fileName": "/src/smallsql/database/IndexScrollStatus.java",
    "startLineNumber": 89,
    "lines": "if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}"
   }
  ],
  "title": "/src/smallsql/database/IndexScrollStatus.java, /src/smallsql/database/IndexScrollStatus.java",
  "id": 28,
  "numClones": 2,
  "cloneSize": 11
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 338,
    "lines": "assertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );"
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 235,
    "lines": "assertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );"
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 423,
    "lines": "assertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );"
   },
   {
    "fileName": "/src/smallsql/junit/TestOrderBy.java",
    "startLineNumber": 207,
    "lines": "assertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );"
   }
  ],
  "title": "/src/smallsql/junit/TestOrderBy.java, /src/smallsql/junit/TestOrderBy.java & more ...",
  "id": 29,
  "numClones": 4,
  "cloneSize": 14
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/database/LongTreeList.java",
    "startLineNumber": 331,
    "lines": "//there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;"
   },
   {
    "fileName": "/src/smallsql/database/LongTreeList.java",
    "startLineNumber": 376,
    "lines": "// there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;"
   }
  ],
  "title": "/src/smallsql/database/LongTreeList.java, /src/smallsql/database/LongTreeList.java",
  "id": 30,
  "numClones": 2,
  "cloneSize": 10
 },
 {
  "clones": [
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 262,
    "lines": "assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t\t\r\n            assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n            \r\n\t\t\tSavepoint savepoint = con.setSavepoint();\r\n\t\t\t\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");"
   },
   {
    "fileName": "/src/smallsql/junit/TestTransactions.java",
    "startLineNumber": 305,
    "lines": "assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));\r\n            assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            Savepoint savepoint = con.setSavepoint();\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));\r\n            assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");"
   }
  ],
  "title": "/src/smallsql/junit/TestTransactions.java, /src/smallsql/junit/TestTransactions.java",
  "id": 31,
  "numClones": 2,
  "cloneSize": 10
 }
]